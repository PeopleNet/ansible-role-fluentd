# http://fluentular.herokuapp.com/

# Parse multiline log messages of the form
# YYYY-MM-DD hh:mm:ss.mss level [class] (thread) ...
<source>
  @type tail
  path /opt/omero/server/OMERO.server/var/log/Blitz-0.log,/opt/omero/server/OMERO.server/var/log/DropBox.log,/opt/omero/server/OMERO.server/var/log/FileServer.log,/opt/omero/server/OMERO.server/var/log/Indexer-0.log,/opt/omero/server/OMERO.server/var/log/MonitorServer.log,/opt/omero/server/OMERO.server/var/log/PixelData-0.log,/opt/omero/server/OMERO.server/var/log/Processor-0.log,/opt/omero/server/OMERO.server/var/log/Tables-0.log,/opt/omero/web/OMERO.web/var/log/OMEROweb.log

  pos_file /var/log/td-agent/omero.log.pos
  tag raw.omero.*

  format multiline
  format_firstline /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}\s+\w+/
  format1 /^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3})\s*(?<level>\w+)\s*\[\s*(?<class>[^\]]+)\]\s*\((?<thread>[^\)]+)\)\s*(?<message>.*)/
  time_format %Y-%m-%d %H:%M:%S,%L
</source>

# TODO: Add source for master.out master.err

# Add source hostname and file, standardise level text
<filter raw.omero.**>
  @type record_transformer
  enable_ruby
  <record>
    hostname "#{Socket.gethostname}"
    file ${tag_parts[-2]}.${tag_parts[-1]}
    level "${record['level'].downcase.gsub(/^warn.*/i, 'warn').gsub(/^err.*/i, 'error').gsub(/^crit.*/i, 'critical')}"
  </record>
</filter>

# Add server component to tag
<match raw.omero.**>
  @type rewrite_tag_filter
  <rule>
    key file
    pattern ^(\w+)(-\w+)?\.log$
    tag raw1.omero.$1
  </rule>
</match>

# Add log level to tag
<match raw1.omero.**>
  @type rewrite_tag_filter
  <rule>
    key level
    pattern (.+)
    tag omero.${tag_parts[2]}.$1
  </rule>
</match>

# For debugging only
#<filter **>
#  @type stdout
#</filter>

# Discard logs below warn level
<filter omero.**>
  @type grep
  <regexp>
    key level
    pattern ^(warn|error|critical)
  </regexp>
</filter>

<match omero.**>
  @type copy
  <store>
    @type file
    path /var/log/td-agent/omero/
    symlink_path /var/log/td-agent/omero/fluentd.log
  </store>
  <store>
    @type relabel
    @label @NOTIFICATION
  </store>
</match>

# Send slack notifications for error and critical
<label @NOTIFICATION>
  <filter omero.**>
    @type grep
    <regexp>
      key level
      pattern ^(error|critical)
    </regexp>
    # Could also filter by message content
  </filter>

  <filter omero.**>
    @type record_transformer
    enable_ruby
    <record>
      # Limit message length
      message "${record['message'][0, 1024] + (record['message'].length > 1024 ? ' ...' : '')}"
    </record>
  </filter>

  <match omero.**>
    @type slack
    token "#{ENV['SLACK_TOKEN']}"
    username fluentd-nginx
    icon_emoji :warning:
    channel "#trash"
    message ":warning: *%s* %s %s @here
```
%s
```
"
    message_keys tag,hostname,time,message
    time_format %F %T.%L
    flush_interval 5s
  </match>
</label>
